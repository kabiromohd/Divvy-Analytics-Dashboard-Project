id: 09_gcp_capstone1
namespace: zoomcamp
description: |
  The CSV Data used in the course: https://divvy-tripdata.s3.amazonaws.com/202501-divvy-tripdata.zip
inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [divvy, others]
    defaults: divvy
    allowCustomValue: true

  - id: year
    type: SELECT
    displayName: Select year
    values: ["2023", "2024", "2025"]
    defaults: "2025"
    allowCustomValue: true

  - id: month
    type: SELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"

variables:
  file: "{{inputs.year}}{{inputs.month}}-divvy-tripdata.csv"
  zip_file: "{{inputs.year}}{{inputs.month}}-divvy-tripdata.zip"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.{{inputs.year}}{{inputs.month}}-divvy-tripdata"
  data: "{{outputs.extract.outputFiles[inputs.year ~ inputs.month ~ '-divvy-tripdata.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      zip_file: "{{render(vars.zip_file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget https://divvy-tripdata.s3.amazonaws.com/{{render(vars.zip_file)}}
      - unzip -o {{render(vars.zip_file)}}
      #- gunzip {{render(vars.zip_file)}}
      

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"
    
    
  - id: if_divvy
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'divvy'}}"
    then:
      - id: bq_divvy_tripdata
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.divvy_tripdata`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
              ride_id STRING OPTIONS (description = 'A code indicating the LPEP provider that provided the record'),
              rideable_type STRING OPTIONS (description = '1=classic_bike, 2=electric_bike'),
              started_at TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
              ended_at TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
              start_station_name STRING OPTIONS (description = 'Ride Zone in which the taximeter was engaged'),
              start_station_id STRING OPTIONS (description = 'Ride Zone ID in which the taximeter was disengaged'),
              end_station_name STRING OPTIONS (description = 'Ride Zone in which the taximeter was engaged'),
              end_station_id STRING OPTIONS (description = 'Ride Zone ID in which the taximeter was disengaged'),
              start_lat FLOAT64 OPTIONS (description = 'Ride Latitude in which the taximeter was engaged'),
              start_lng FLOAT64 OPTIONS (description = 'Ride longitude in which the taximeter was engaged'),
              end_lat FLOAT64 OPTIONS (description = 'Ride Latitude in which the taximeter was disengaged'),
              end_lng FLOAT64 OPTIONS (description = 'Ride Longitude in which the taximeter was disengaged'),
              member_casual STRING OPTIONS (description = '1=member, 2=casual')
          )
          PARTITION BY DATE(started_at);

      - id: bq_divvy_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}-et`
          (
            ride_id STRING OPTIONS (description = 'A code indicating the LPEP provider that provided the record'),
              rideable_type STRING OPTIONS (description = '1=classic_bike, 2=electric_bike'),
              started_at TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
              ended_at TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
              start_station_name STRING OPTIONS (description = 'Ride Zone in which the taximeter was engaged'),
              start_station_id STRING OPTIONS (description = 'Ride Zone ID in which the taximeter was disengaged'),
              end_station_name STRING OPTIONS (description = 'Ride Zone in which the taximeter was engaged'),
              end_station_id STRING OPTIONS (description = 'Ride Zone ID in which the taximeter was disengaged'),
              start_lat FLOAT64 OPTIONS (description = 'Ride Latitude in which the taximeter was engaged'),
              start_lng FLOAT64 OPTIONS (description = 'Ride longitude in which the taximeter was engaged'),
              end_lat FLOAT64 OPTIONS (description = 'Ride Latitude in which the taximeter was disengaged'),
              end_lng FLOAT64 OPTIONS (description = 'Ride Longitude in which the taximeter was disengaged'),
              member_casual STRING OPTIONS (description = '1=member, 2=casual')
          )
          OPTIONS (
              format = 'CSV',
              uris = ['{{render(vars.gcs_file)}}'],
              skip_leading_rows = 1,
              ignore_unknown_values = TRUE
          );

      - id: bq_divvy_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(ride_id AS STRING), ""),
              COALESCE(CAST(started_at AS STRING), ""),
              COALESCE(CAST(ended_at AS STRING), ""),
              COALESCE(CAST(start_station_id AS STRING), ""),
              COALESCE(CAST(end_station_id AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.zip_file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}-et`;

      - id: bq_divvy_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.divvy_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, ride_id, rideable_type, started_at, ended_at, start_station_name, start_station_id, end_station_name, end_station_id, start_lat, start_lng, end_lat, end_lng, member_casual)
            VALUES (S.unique_row_id, S.filename, S.ride_id, S.rideable_type, S.started_at, S.ended_at, S.start_station_name, S.start_station_id, S.end_station_name, S.end_station_id, S.start_lat, S.start_lng, S.end_lat, S.end_lng, S.member_casual);


  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"
